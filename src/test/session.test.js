const chai = require('chai')
const supertest = require('supertest')
const { generateUser } = require('../utils/faker')

const expect = chai.expect
const requester = supertest('http://localhost:8080/')

//IMPORTANT: As this test is using a user generated by Faker, the entire suite must be run in the order they appear
// and all togheter. Otherwise the login will not work because the user trying to login will not be registered

describe('Session tests', () => {
  let cookie;
  const mockUser = generateUser()
  let loginUser;

  it('Register a new user', async () => {

    const {
      statusCode,
    } = await requester.post('api/sessions/register').send(mockUser)

    expect(statusCode).to.be.equal(200)
  })

  it('Login a user and check the return of a cookie', async () => {
    loginUser = {
      email: mockUser.email,
      password: mockUser.password
    }

    const result = await requester.post('api/sessions/login').send(loginUser)
    const cookieResponse = result.headers['set-cookie'][0]
    expect(cookieResponse).to.be.ok
    cookie = {
      name: cookieResponse.split('=')[0],
      value: cookieResponse.split('=')[1]
    }

    expect(cookie.name).to.be.ok.and.eql('cookie-user')
    expect(cookie.value).to.be.ok
  })

  it('Search for current user and validate user email retrieved', async () => {
    const { _body } = await requester.get('api/sessions/current').set('Cookie', [`${cookie.name}=${cookie.value}`])

    expect(_body.user.email).to.be.equal(mockUser.email)
  })
})